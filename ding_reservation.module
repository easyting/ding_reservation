<?php

/**
 * @file
 * Handles display and creation/deletion of reservations for users.
 */

// Default interest period is ~six months.
define('DING_RESERVATION_DEFAULT_INTEREST_PERIOD', 183 * 86400);

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types. In this case the subdirectories of
 * ctools_plugin_example/panels are used.
 */
function ding_reservation_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_menu().
 */
function ding_reservation_menu() {
  $items['user/%user/status/reservations/update/%'] = array(
    'title' => 'Update reservations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_reservation_update_reservations_form', 1, 5),
    'access callback' => 'ding_reservation_access',
    'access arguments' => array(1),
  );

  $items['reservation/reserve/%'] = array(
    'page callback' => 'ding_reservation_reserve_ajax',
    'page arguments' => array(2),
    'access callback' => array(1),
    'delivery callback' => 'ajax_deliver',
  );

  return $items;
}

/**
 * Access callback. Ensure that current user is the same.
 */
function ding_reservation_access($account) {
  global $user;
  return $user->uid == $account->uid;
}

/**
 * Implements hook_ding_entity_menu().
 */
function ding_reservation_ding_entity_menu(&$items, $type, $path, $index) {
  if ($type == 'ding_entity') {
    $items[$path . '/reserve'] = array(
      'title' => 'Reserve',
      'page callback' => 'ding_provider_get_form',
      'page arguments' => array('ding_reservation_reserve_form', $index),
      'access callback' => TRUE,
    );
  }
}

/**
 * Implements hook_ding_entity_buttons().
 */
function ding_reservation_ding_entity_buttons($type, $entity, $widget = 'default') {
  if ($type == 'ding_entity') {
    if ($widget == 'ajax') {
      drupal_add_library('system', 'drupal.ajax');
      drupal_add_library('system', 'jquery.form');
      drupal_add_js(drupal_get_path('module', 'ding_availability') . '/js/ding_availability_lib.js');
      drupal_add_js(drupal_get_path('module', 'ding_reservation') . '/js/ding_reservation_scripts.js');

      $entity_id = $entity->localId;

      return array(
        array(
          '#prefix' => '<div class="hidden reservation-link-ajax ting-object-id-' . $entity_id . '" id="reservation-' . $entity_id . '">',
          '#suffix' => '</div>',
          '#markup' => l(t('Reserve'), 'reservation/reserve/' . $entity_id, array('attributes' => array('class' => array('use-ajax')), 'absolute' => TRUE)),
        )
      );
    }
  }
}

/**
 * Ajax entry callback.
 *
 * Perform ajax-specific commands for forms retrieval and displacement.
 *
 * @param $entity_id
 *   Ting object id.
 */
function ding_reservation_reserve_ajax($entity_id = '') {
  if (!empty($entity_id)) {
    $agency = variable_get('ting_agency', '');
    $entity = ting_get_object_request($agency . ':' . $entity_id);

    if (is_object($entity) && $entity instanceof TingClientObject) {
      $commands = array();
      $form = ding_provider_get_form(
        'ding_reservation_reserve_form',
        new DingReservationReservableEntity($entity)
      );
      $reservation_form = drupal_render($form);
      $commands[] = ajax_command_invoke('body', 'append', array($reservation_form));
      $commands[] = ding_reservation_command_init_behavior($entity_id);

      return array(
        '#type' => 'ajax',
        '#commands' => $commands,
      );
    }
  }
}

/**
 * Custom ajax command.
 *
 * Initialize behaviors for dynamicly created forms.
 *
 * @param $entity_id
 *   Ting object id.
 */
function ding_reservation_command_init_behavior($entity_id = '') {
  if (!empty($entity_id)) {
    return array('command' => 'enable_reservation', 'data' => $entity_id);
  }
}

/**
 * Implements hook_ding_provider_user().
 */
function ding_reservation_ding_provider_user() {
  return array(
    'reservation' => array(
      'required' => TRUE,
      'install time setup' => TRUE,
    ),
  );
}

/**
 * Implements hook_forms().
 *
 * If the forms listing ready and not ready for pickup reservations is listed
 * on the same page, they need to have different form ids in order for Drupal
 * to be able to tell which was submitted. As we're using one builder
 * function, use this to let have their own form id.
 */
function ding_reservation_forms($form_id, $args) {
  $forms['ding_reservation_reservations_ready_form'] = array(
    'callback' => 'ding_reservation_reservations_form',
  );
  $forms['ding_reservation_reservations_notready_form'] = array(
    'callback' => 'ding_reservation_reservations_form',
  );
  $forms['ding_reservation_reservations_ill'] = array(
    'callback' => 'ding_reservation_reservations_form',
  );
  return $forms;
}

/**
 * Reserve form callback.
 *
 * Note that this form relies on form caching, which is triggered by
 * ajaxifying the submit button.
 */
function ding_reservation_reserve_form($form, &$form_state, $reservable, $hide_options = TRUE) {
  global $user;
  if (!($reservable instanceof DingReservationReservable)) {
    // Assume that we were given a reservable entity.
    $reservable = new DingReservationReservableEntity($reservable);
  }
  $entity = $reservable->getEntity();
  $uri = ding_entity_uri('ding_entity', $entity);

  // If HTTPS is enabled we are redirected to the reservation form page after
  // logging in is done and we need to save the item user wanted to reserve
  // to reserve it again automatically.
  if (variable_get('https', FALSE) && !$user->uid) {
    setcookie('entityReserveOnce', $entity->localId, 0, '/');
  }

  // We post to our own path as we might want to rebuild the form.
  // @todo move *_get_destination to ding_base?
  if ($_GET['q'] != $uri['path'] . '/reserve') {
    $form['#action'] = url($uri['path'] . '/reserve', array('query' => ding_provider_get_destination()));
  }

  $form['reservable'] = array(
    '#type' => 'value',
    '#value' => $reservable,
  );

  $form['provider_options'] = array(
    '#type' => 'value',
    '#value' => array(),
  );

  $hide_options = !isset($form_state['options_hidden']) ? $hide_options : FALSE;
  $form_state['options_hidden'] = $hide_options;

  if (ding_provider_implements('reservation', 'options') && $provider_form = ding_provider_invoke('reservation', 'options', 'create', $user, $reservable)) {
    $form['provider_options'] = $provider_form + array(
      '#tree' => TRUE,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Reserve'),
    '#ajax' => array(
      'callback' => 'ding_reservation_reserve_form_callback',
      'wrapper' => 'ding-reservation-reserve-form',
    ),
  );

  return $form;
}

/**
 * Form validation.
 */
function ding_reservation_reserve_form_validate($form, &$form_state) {
  global $user;
  if (ding_provider_implements('reservation', 'options_validate')) {
    $res = ding_provider_invoke('reservation', 'options_validate', 'create', $user, $form_state['values']['reservable'], $form_state['values']['provider_options']);
    // No valudation options returned by provider.

    if (is_null($res)) {
      return;
    }

    /**
     * We cannot set the value of the individual provider form elements, as
     * they might not have been show, and thus not exist. However, setting the
     * value of the parent element to an associative array gives the same end
     * result.
     */
    $provider_options = array();
    $provider = ding_provider_get_provider_module_name('reservation');
    $removal = array();
    foreach ($res as $key => $value) {
      if (is_array($value) && !empty($value['#error'])) {
        if ($key == $provider . '_preferred_branch') {
          $removal[] = $provider . '_interest_period';
        }
        elseif ($key == $provider . '_interest_period') {
          $removal[] = $provider . '_preferred_branch';
        }

        // In case both fields are not set, remove nothing.
        if (count($removal) == 2) {
          $removal = array();
        }

        $form_state['removable'] = $removal;
        $form_state['rebuild'] = TRUE;
      }
      else {
        $provider_options[$key] = $value;
      }
    }
    if (!empty($provider_options)) {
      form_set_value($form['provider_options'], $provider_options, $form_state);
    }
  }
}

/**
 * Form submission handler.
 */
function ding_reservation_reserve_form_submit($form, &$form_state) {
  global $user;
  if (ding_provider_implements('reservation', 'options_submit')) {
    ding_provider_invoke('reservation', 'options_submit', 'create', $user, $form_state['values']['reservable'], $form_state['values']['provider_options']);
  }
  if ($form_state['values']['reservable']) {
    $reservable = $form_state['values']['reservable'];
    try {
      $reservation_result = ding_provider_invoke('reservation', 'create', $user, $reservable->getProviderId(), $form_state['values']['provider_options']);
      $form_state['reserved'] = TRUE;
      // @todo use profile
      if (!empty($reservation_result['branch']) && ding_provider_implements('reservation', 'branch_name')) {
        $branch_name = ding_provider_invoke('reservation', 'branch_name', $reservation_result['branch']);
        drupal_set_message(t('"@title" reserved and will be available for pickup at @branch.', array('@title' => $reservable->getTitle(), '@branch' => $branch_name)));
      }
      else {
        drupal_set_message(t('"@title" reserved.', array('@title' => $reservable->getTitle())));
      }

      if (is_array($reservation_result) and !empty($reservation_result['queue_number'])) {
        drupal_set_message(t('You are number @number in queue.', array('@number' => $reservation_result['queue_number'])));
      }
      module_invoke_all('ding_reservation_complete', $reservable);
    }
    catch (DingProviderUserException $e) {
      drupal_set_message($e->getMessageT(array('@title' => $reservable->getTitle())), 'error');
    }
    catch (DingProviderAuthException $e) {
      // Just rethrow.
      throw $e;
    }
    catch (Exception $e) {
      drupal_set_message(t('An error occurred while reserving item. Please try again later.'), 'error');
      watchdog('ding_reservation', 'Error while reserving, message: @message', array('@message', $e->getMessage()), WATCHDOG_ERROR);
    }
  }
}

/**
 * Ajax callback.
 */
function ding_reservation_reserve_form_callback($form, &$form_state) {
  $response = array(
    '#type' => 'ajax',
    '#commands' => array(),
  );

  $html = theme('status_messages');
  if ($form_state['rebuild'] || form_get_errors()) {
    $provider = ding_provider_get_provider_module_name('reservation');

    // Populate the inputs with default values from settings.
    $field_name = $provider . '_interest_period';
    $field_info = field_info_instance('profile2', 'field_' . $field_name, 'provider_' . $provider);
    // Use #value instead of #default_value when rendering forms
    // using drupal_render().
    $form['provider_options'][$field_name]['#value'] = $field_info['default_value'][0]['value'];

    // Hide certain fields, if any.
    if (is_array($form_state['removable'])) {
      $removal = $form_state['removable'];
      foreach ($removal as $v) {
        unset($form['provider_options'][$v]);
        unset($form['provider_options'][$v . 'description']);
      }

    }
    // Redisplay form.
    $html .= drupal_render($form);
  }

  $response['#commands'][] = ajax_command_ding_popup('ding_reservation', t('Reserve'), $html);
  $commands = module_invoke_all('ding_reservation_ajax_complete');
  $response['#commands'] = array_merge($response['#commands'], $commands);
  return $response;
}

/**
 * Show a reservation list form.
 */
function ding_reservation_reservations_form($form, &$form_state, $items = array(), $type = 'not_ready_for_pickup') {
  $options = array();
  $destination = drupal_get_destination();
  $provider = ding_provider_get_provider_module_name('reservation');
  $able_to_delete = variable_get($provider . '_enable_reservation_deletion', FALSE);
  $alma_rule = (($type == 'ready_for_pickup' || $type == 'interlibray_loans' || $type == 'not_ready_for_pickup') && $provider == 'alma');
  $openruth_rule = ($type == 'not_ready_for_pickup' && $provider == 'openruth');
  $empty_message = '';
  $header = array();

  switch ($type) {
    case 'ready_for_pickup':
      $header = array(
        'title' => t('Title'),
        'pickup_id' => t('Pickup id'),
        'created' => t('Created date'),
        'pickup_date' => t('Pickup date'),
        'pickup_branch' => t('Pickup branch'),
        'operations' => '',
      );
      uasort($items, 'ding_reservation_sort_queue_by_pickup_date');
      break;
    case 'not_ready_for_pickup':
      $header = array(
        'title' => t('Title'),
        'order_nr' => t('Order nr.'),
        'created' => t('Created date'),
        'expiry' => t('Expiry date'),
        'pickup_branch' => t('Pickup branch'),
        'queue_number' => t('Queue number'),
        'operations' => '',
      );
      uasort($items, 'ding_reservation_sort_queue_by_queue_number');
      break;
    case 'interlibrary_loans':
      $header = array(
        'title' => t('Title'),
        'created' => t('Created date'),
        'expiry' => t('Expiry date'),
        'library' => t('Library'),
        'ill_status' => t('Status'),
      );
      break;
  }
  foreach ($items as $id => $item) {
    $entity = $item->entity;
    if (!is_object($entity)) {
      $entity = ding_reservation_replace_entity($item);
    }

    $pickup_branch = ding_provider_invoke('reservation', 'branch_name', $item->pickup_branch_id);
    switch ($type) {
      case 'ready_for_pickup':
        $delete_button = array(
          '#prefix' => '<div class="delete-reservation">',
          '#suffix' => '</div>',
          '#type' => 'submit',
          '#submit' => array('ding_reservation_reservations_delete_submit'),
          '#reservation_id' => $item->id,
          '#name' => 'delete-' . preg_replace('/\W/', '-', $item->id), // Need this for formAPI can tell buttons apart
          '#value' => t('Delete'),
          '#options' => array('query' => $destination),
        );
        $options[$item->id] = array(
          'title' => array(
            'data' => array($entity ? ting_object_view($entity, 'user_list') : array('#markup' => $item->display_name)),
            'class' => 'title',
          ),
          'pickup_id' => array(
            'data' => ding_reservation_get_pickup_id($item),
            'class' => 'pickup-id',
          ),
          'created' => array(
            'data' => $item->created ? format_date(strtotime(check_plain($item->created)), 'custom', 'd/m/Y') : '',
            'class' => 'created-date',
          ),
          'pickup_date' => array(
            'data' => $item->pickup_date ? format_date(strtotime(check_plain($item->pickup_date)), 'custom', 'd/m/Y') : '',
            'class' => 'pickup-date',
          ),
          'pickup_branch' => array(
            'data' => $pickup_branch ? check_plain($pickup_branch) : '',
            'class' => 'pickup-branch',
          ),
          'operations' => array(
            'data' => ($able_to_delete && $provider != 'openruth') ? $delete_button : '',
            'class' => 'operations',
          ),
        );
        if (!empty($item->notes)) {
          $options[$item->id]['title']['data'][] = array(
            '#type' => 'markup',
            '#prefix' => '<p class="periodical-number">',
            '#markup' => t('(Periodical no. @periodical)', array('@periodical' => check_plain($item->notes))),
            '#suffix' => '</p>',
          );
        }

        $empty_message = t('No reservations ready for pickup');
        break;
      case 'not_ready_for_pickup':
        $delete_button = array(
          '#prefix' => '<div class="delete-reservation">',
          '#suffix' => '</div>',
          '#type' => 'submit',
          '#submit' => array('ding_reservation_reservations_delete_submit'),
          '#reservation_id' => $item->id,
          '#name' => 'delete-' . preg_replace('/\W/', '-', $item->id), // Need this for formAPI can tell buttons apart
          '#value' => t('Delete'),
          '#options' => array('query' => $destination),
        );
        $options[$item->id] = array(
          'title' => array(
            'data' => array($entity ? ting_object_view($entity, 'user_list') : array('#markup' => $item->display_name)),
            'class' => 'title',
          ),
          'order_nr' => array(
            'data' => ding_reservation_get_order_nr($item),
            'class' => 'pickup-id',
          ),
          'created' => array(
            'data' => $item->created ? format_date(strtotime(check_plain($item->created)), 'custom', 'd/m/Y') : '',
            'class' => 'created-date',
          ),
          'expiry' => array(
            'data' => $item->created ? format_date(strtotime(check_plain($item->expiry)), 'custom', 'd/m/Y') : '',
            'class' => 'expire-date',
          ),
          'pickup_branch' => array(
            'data' => $pickup_branch ? check_plain($pickup_branch) : '',
            'class' => 'pickup-branch',
          ),
          'queue_number' => array(
            'data' => $item->queue_number ? check_plain($item->queue_number) : '',
            'class' => 'queue-number',
          ),
          'operations' => array(
            'data' => ($able_to_delete) ? $delete_button : '',
            'class' => 'operations',
          ),
        );

        if (!empty($item->notes)) {
          $options[$item->id]['title']['data'][] = array(
            '#type' => 'markup',
            '#prefix' => '<p class="periodical-number">',
            '#markup' => t('(Periodical no. @periodical)', array('@periodical' => check_plain($item->notes))),
            '#suffix' => '</p>',
          );
        }

        $empty_message = t('No Reservations');
        break;
      case 'interlibrary_loans':
        $options[$item->id] = array(
          'title' => array(
            'data' => array($entity ? ting_object_view($entity, 'user_list') : array('#markup' => $item->display_name)),
            'class' => 'title',
          ),
          'created' => array(
            'data' => $item->created ? format_date(strtotime(check_plain($item->created)), 'custom', 'd/m/Y') : '',
            'class' => 'created-date',
          ),
          'expiry' => array(
            'data' => $item->created ? format_date(strtotime(check_plain($item->expiry)), 'custom', 'd/m/Y') : '',
            'class' => 'expire-date',
          ),
          'library' => array(
            'data' => $pickup_branch ? check_plain($pickup_branch) : '',
            'class' => 'pickup-branch',
          ),
          'ill_status' => array(
            'data' => $item->ill_status ? t(check_plain($item->ill_status)) : '',
            'class' => 'ill-status',
          ),
        );

        if (!empty($item->notes)) {
          $options[$item->id]['title']['data'][] = array(
            '#type' => 'markup',
            '#prefix' => '<p class="periodical-number">',
            '#markup' => t('(Periodical no. @periodical)', array('@periodical' => check_plain($item->notes))),
            '#suffix' => '</p>',
          );
        }
        $empty_message = t('No inter-library loans');
        break;
    }
  }
  if ($alma_rule || $openruth_rule) {
    $form['reservations_wrapper'] = array(
      '#type' => 'fieldset',
    );

    $form['reservations_wrapper']['reservations'] = array(
      '#type' => 'tableselect_form',
      '#header' => $header,
      '#options' => $options,
      '#empty' => $empty_message,
    );
  }
  else {
    $form['reservations'] = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $options,
      '#empty' => $empty_message,
    );
  }
  $form['actions'] = array(
    '#prefix' => '<div class="op-reservations">',
    '#suffix' => '</div>',
  );

  // Not every type of loan can be deleted.
  // @see Lines 352 & 353 for rules.
  if (($alma_rule || $openruth_rule) && $able_to_delete) {
    $form['actions']['submit'] = array(
      '#prefix' => '<div class="delete-reservations">',
      '#suffix' => '</div>',
      '#submit' => array('ding_reservation_reservations_delete_submit'),
      '#type' => 'submit',
      '#value' => t('Delete reservations'),
    );
  }

  if ($type == 'not_ready_for_pickup') {
    $form['actions']['update'] = array(
      '#prefix' => '<div class="update-reservations">',
      '#suffix' => '</div>',
      '#type' => 'submit',
      /* '#submit' => array('ding_reservation_update_reservation_form'), */
      '#submit' => array('ding_reservation_reservations_form_submit'),
      '#value' => t('Update reservations'),
      '#ajax' => array(
        'callback' => 'ding_reservation_reservations_form_callback',
        'wrapper' => 'ding-reservation-reservations-form',
      ),
    );
  }

  return $form;
}

/**
 * Get pickup id number.
 *
 * @param $item
 *   Reserved item object.
 * @return
 *   Pickup id, if any.
 */
function ding_reservation_get_pickup_id($item) {
  if (isset($item->order_arrived) && !$item->order_arrived) {
    return t('The material is in transit and is still not available for loan on the library');
  }
  elseif (isset($item->pickup_order_id)) {
    return $item->pickup_order_id;
  }

  return '';
}

/**
 * Get order id number.
 *
 * @param $item
 *   Reserved item object.
 * @return
 *   Order number, if any.
 */
function ding_reservation_get_order_nr($item) {
  if (!isset($item->pickup_order_id) && isset($item->order_id)) {
    return $item->order_id;
  }
  else {
    return t('On route') . ' ' . l('(?)', current_path(), array('attributes' => array('title' => t('The material is on route to the library. You will be notified when it is ready for pickup.'))));
  }
}

/**
 * Create a dummy ting entity object, when item is not found in the ting well.
 * Fill in data using info fetched from certain provider.
 *
 * @param $entity_id
 *   Ting object id.
 * @return
 *   A TingEntity object or FALSE if provider failed to fetch the data.
 */
function ding_reservation_replace_entity($item) {
  $provider = _ding_provider_get_provider();
  return call_user_func($provider['reservation']['module'] . '_replace_entity', $item);
}

function ding_reservation_reservations_delete_submit($form, &$form_state) {
  global $user;
  if (!empty($form_state['triggering_element']['#reservation_id'])) {
    $reservations = array($form_state['triggering_element']['#reservation_id']);
  }
  else {
    $reservations = array_filter($form_state['values']['reservations']);
  }
  foreach ($reservations as $entity_id) {
    ding_provider_invoke('reservation', 'delete', $user, $entity_id);
  }
  module_invoke_all('ding_reservation_deleted', $reservations);
}

/**
 * Submit handler for the form.
 */
function ding_reservation_reservations_form_submit($form, &$form_state) {
  global $user;
  $ids = join(',', array_map('rawurlencode', array_filter($form_state['values']['reservations'], 'is_string')));
  $form_state['encoded_reservations'] = $ids;
  $form_state['redirect'] = array('user/' . $user->uid . '/status/reservations/update/' . $ids, array('query' => drupal_get_destination()));
}

/**
 * Ajax callback.
 */
function ding_reservation_reservations_form_callback($form, &$form_state) {
  global $user;
  $response = array(
    '#type' => 'ajax',
    '#commands' => array(),
  );

  $html = theme('status_messages');
  $html .= drupal_render(drupal_get_form('ding_reservation_update_reservations_form', $user, $form_state['encoded_reservations']));

  if ($html) {
    $response['#commands'][] = ajax_command_ding_popup('ding_reservation', t('Update reservations'), $html, array('refresh' => TRUE));
  }
  return $response;
}

/**
 * Update reservations form.
 */
function ding_reservation_update_reservations_form($form, $form_state, $account, $reservation_ids) {
  global $user;
  $ids = array_map('rawurldecode', explode(',', $reservation_ids));

  $form_state['cache'] = TRUE;

  $form['reservations'] = array(
    '#type' => 'value',
    '#value' => $ids,
  );

  if (ding_provider_implements('reservation', 'options') && $provider_form = ding_provider_invoke('reservation', 'options', 'update', $user, NULL)) {
    $form['provider_options'] = $provider_form + array(
      '#tree' => TRUE,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#submit' => array('ding_reservation_update_reservations_form_submit'),
    '#ajax' => array(
      'callback' => 'ding_reservation_update_reservations_form_callback',
      'wrapper' => 'ding-reservation-update-reservation-form',
    ),
    '#value' => t('Update reservations'),
  );

  return $form;
}

/**
 * Validation handler.
 */
function ding_reservation_update_reservations_form_validate($form, &$form_state) {
  global $user;
  if (ding_provider_implements('reservation', 'options_validate')) {
    $res = ding_provider_invoke('reservation', 'options_validate', 'update', $user, $form_state['values']['reservations'], $form_state['values']['provider_options']);
    /**
     * We cannot set the value of the individual provider form elements, as
     * they might not have been show, and thus not exist. However, setting the
     * value of the parent element to an associative array gives the same end
     * result.
     */
    $provider_options = array();
    foreach ($res as $key => $value) {
      if (is_array($value) && !empty($value['#error'])) {
        if (!$form_state['options_hidden']) {
          // Only show an error if the user had a choice.
          form_error($form['provider_options'], $res['#error']);
        }
        else {
          // Else simply rebuild the form.
          $form_state['rebuild'] = TRUE;
        }
      }
      else {
        $provider_options[$key] = $value;
      }
    }

    if (!empty($provider_options)) {
      form_set_value($form['provider_options'], $provider_options, $form_state);
    }
  }
}

/**
 * Submit handler.
 *
 * Updates selected reservations.
 */
function ding_reservation_update_reservations_form_submit($form, &$form_state) {
  global $user;
  ding_provider_invoke('reservation', 'update', $user, $form_state['values']['reservations'], $form_state['values']['provider_options']);
}

/**
 * Ajax callback function.
 */
function ding_reservation_update_reservations_form_callback($form, &$form_state) {
  $response = array(
    '#type' => 'ajax',
    '#commands' => array(),
  );

  $html = theme('status_messages') . t('Your reservations has been updated.');
  $response['#commands'][] = ajax_command_ding_popup('ding_reservation', t('Update reservations'), $html, array('refresh' => FALSE));

  return $response;
}

/**
 * Default options handling.
 *
 * Reservation providers may use these to use standard implementations of
 * widgets like pickup branch and get much logic for free.
 */

/**
 * Create a pickup branch selector.
 *
 * Returns form element(s) for selecting a pickup branch.
 */
function ding_reservation_default_options_branch($type, $name, $default, $options) {
  $create = ($type == 'create');
  $allowed_branches = array();

  if ($create) {
    $allowed_branches = array('' => t('Select'));
  }
  else {
    $allowed_branches = array(
      $default => t('@branch (Default)', array(
        '@branch' => $options[$default])
      )
    );
  }

  $allowed_branches += $options;

  $form[$name] = array(
    '#type' => 'select',
    '#title' => t('Select branch'),
    '#options' => $allowed_branches,
    '#default_value' => $default,
  );
  if ($create) {
    $form[$name . 'description'] = array(
      '#markup' => '<p>' . t('In order to make quick reservations, you must select a default pickup branch.') . '</p>',
    );
  }
  return $form;
}


/**
 * Create an interest period selector.
 *
 * Returns form element(s) for selecting an interest period.
 */
function ding_reservation_interest_period_selector($type, $name, $default, $options) {
  $create = ($type == 'create');

  // Used for options translation.
  if (is_array($options)) {
    foreach ($options as $k => $v) {
      $options[$k] = t(check_plain($v));
    }
  }

  $allowed_periods = ($create ? array('' => 'Select') : array('' => t('No change'))) + (array) $options;

  $form[$name] = array(
    '#type' => 'select',
    '#title' => t('Select interest period'),
    '#options' => $allowed_periods,
    '#default_value' => $default,
  );
  if ($create) {
    $form[$name . 'description'] = array(
      '#markup' => '<p>' . t('Select an interest period.') . '</p>',
    );
  }
  return $form;
}


/**
 * Validate pickup branch selector.
 *
 * Returns what ding_reservation expects.
 */
function ding_reservation_default_options_branch_validate($type, $name, $default, $values) {
  if (empty($values[$name])) {
    $provider = ding_provider_get_provider_module_name('reservation');
    if ($type == 'create' && empty($default)) {
      $result[$provider . '_preferred_branch'] = array(
        '#error' => t('You must select a branch'),
      );
    }
    else {
      $result[$name] = $default;
    }
    return $result;
  }
  else {
    return array($name => $values[$name]);
  }
}

/**
 * Validate interest period selector.
 *
 * Returns what ding_reservation expects.
 */
function ding_reservation_default_options_interest_period_validate($type, $name, $default, $values) {
  if (empty($values[$name])) {
    $provider = ding_provider_get_provider_module_name('reservation');
    if ($type == 'create' && empty($default)) {
      $result[$provider . '_interest_period'] = array(
        '#error' => t('You must select an interest period'),
      );
    }
    else {
      $result[$name] = $default;
    }
    return $result;
  }
  else {
    return array($name => $values[$name]);
  }
}

/**
 * Submit pickup branch selector.
 *
 * Returns new properties to save, if any.
 */
function ding_reservation_default_options_branch_submit($type, $name, $default, $values) {
  $result = array();
  if ($type == 'create' && !empty($values[$name]) && $values[$name] != $default) {
    $result[$name] = $values['name'];
  }
  return $result;
}


/**
 * Callback function to sort array by pickup date
 */
function ding_reservation_sort_queue_by_pickup_date($a, $b) {
  if ($a->pickup_date == $b->pickup_date) {
    return 0;
  }
  return ($a->pickup_date < $b->pickup_date) ? -1 : 1;
}

/**
 * Callback function for sorting loans by queue_number
 */
function ding_reservation_sort_queue_by_queue_number($a, $b) {
  if ($a->queue_number == $b->queue_number) {
    return 0;
  }
  return ($a->queue_number < $b->queue_number) ? -1 : 1;
}

/**
 * Triggers reservation link click to ensure seamless reservation between redirects.
 * Conditional addition of ie8 fix .js file.
 */
function ding_reservation_init() {
  global $user;
  if ($user->uid && !empty($_COOKIE['entityReserveOnce'])) {
    // @todo: we assume that ding_toggle_format's jquery.cookie.js will be present.
    drupal_add_js(drupal_get_path('module', 'ding_reservation') . '/js/ding_reservation_once.js');
  }
  // Add the .js file if the user browses with IE8.
  preg_match('/MSIE (.*?);/', $_SERVER['HTTP_USER_AGENT'], $matches);
  if ((count($matches) > 1) && ( $matches[1] == 8 )) {
    drupal_add_js(drupal_get_path('module', 'ding_reservation') . '/js/ding_reservation_ie8.js');
  }
}

/**
 * Clear reservations plugin cache.
 */
function _ding_reservation_clear_cache() {
  ding_session_cache_clear('ding_reservation', 'reservations');
}

/**
 * Implements hook_ding_reservation_deleted().
 */
function ding_reservation_ding_reservation_deleted() {
  _ding_reservation_clear_cache();
}

/**
 * Implements hook_ding_reservation_complete().
 */
function ding_reservation_ding_reservation_complete() {
  _ding_reservation_clear_cache();
}

/**
 * Implements hook_ding_session_cache_defaults().
 */
function ding_reservation_ding_session_cache_defaults() {
  return array(
    'titel' => 'Ding Reservation',
    'enabled' => TRUE,
    'expire' => 300,
  );
}

/**
 * Interface for reservable items.
 */
interface DingReservationReservable {
  public function getProviderId();
  // @todo, this should be optional.
  public function getEntity();
  public function getTitle();
}

/**
 * A reservable entity.
 */
class DingReservationReservableEntity implements DingReservationReservable {
  public function __construct($entity) {
    $this->entity = $entity;
  }

  public function getProviderId() {
    return isset($this->entity->localId) ? $this->entity->localId : NULL;
  }

  public function getEntity() {
    return $this->entity;
  }

  public function getTitle() {
    return isset($this->entity->record['dc:title'][''][0]) ? $this->entity->record['dc:title'][''][0] : NULL;
  }
}
